<?php

namespace App\Console\Commands;

use App\Models\Event;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class MigrateEventCategories extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'events:migrate-categories 
                            {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π}
                            {--force : –í—ã–ø–æ–ª–Ω–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        $eventsWithCategory = Event::whereNotNull('category_id')
            ->with('category')
            ->get();
            
        if ($eventsWithCategory->isEmpty()) {
            $this->info('‚úÖ –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏.');
            return Command::SUCCESS;
        }
        
        $this->info("üìã –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {$eventsWithCategory->count()}");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ
        $this->table(
            ['ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'],
            $eventsWithCategory->map(function ($event) {
                return [
                    $event->id,
                    $event->title,
                    $event->category ? $event->category->name : "ID: {$event->category_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω–∞)"
                ];
            })->toArray()
        );
        
        if ($this->option('dry-run')) {
            $this->warn('üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
            $this->showMigrationPlan($eventsWithCategory);
            return Command::SUCCESS;
        }
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (!$this->option('force')) {
            if (!$this->confirm('–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π?', true)) {
                $this->info('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
                return Command::FAILURE;
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        return $this->executeMigration($eventsWithCategory);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     */
    private function showMigrationPlan($events)
    {
        $this->info("\nüìù –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏:");
        
        foreach ($events as $event) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑—å –≤ pivot —Ç–∞–±–ª–∏—Ü–µ
            $existsInPivot = DB::table('event_categories')
                ->where('event_id', $event->id)
                ->where('category_id', $event->category_id)
                ->exists();
                
            if ($existsInPivot) {
                $this->line("   ‚ö†Ô∏è  –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{$event->title}' —É–∂–µ –∏–º–µ–µ—Ç —Å–≤—è–∑—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ");
            } else {
                $categoryName = $event->category ? $event->category->name : "ID: {$event->category_id}";
                $this->line("   ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{$categoryName}' –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é '{$event->title}'");
            }
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.
     */
    private function executeMigration($events)
    {
        $this->info("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...");
        
        $migrated = 0;
        $skipped = 0;
        $errors = 0;
        
        $progressBar = $this->output->createProgressBar($events->count());
        $progressBar->start();
        
        DB::beginTransaction();
        
        try {
            foreach ($events as $event) {
                $progressBar->advance();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                if (!$event->category) {
                    $this->newLine();
                    $this->error("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID {$event->category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è '{$event->title}'");
                    $errors++;
                    continue;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑–∏ –≤ pivot —Ç–∞–±–ª–∏—Ü–µ
                $exists = DB::table('event_categories')
                    ->where('event_id', $event->id)
                    ->where('category_id', $event->category_id)
                    ->exists();
                    
                if ($exists) {
                    $skipped++;
                    continue;
                }
                
                // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –≤ pivot —Ç–∞–±–ª–∏—Ü–µ
                DB::table('event_categories')->insert([
                    'event_id' => $event->id,
                    'category_id' => $event->category_id,
                    'created_at' => now(),
                    'updated_at' => now(),
                ]);
                
                $migrated++;
            }
            
            DB::commit();
            $progressBar->finish();
            
            $this->newLine(2);
            $this->info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
            $this->info("   ‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {$migrated}");
            $this->info("   ‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {$skipped}");
            
            if ($errors > 0) {
                $this->warn("   ‚Ä¢ –û—à–∏–±–æ–∫: {$errors}");
            }
            
            // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            if ($migrated > 0) {
                $this->newLine();
                $this->comment('üí° –°–æ–≤–µ—Ç: –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ category_id:');
                $this->comment('   php artisan events:clear-old-categories');
            }
            
            return Command::SUCCESS;
            
        } catch (\Exception $e) {
            DB::rollBack();
            $progressBar->finish();
            
            $this->newLine(2);
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {$e->getMessage()}");
            $this->error("–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.");
            
            return Command::FAILURE;
        }
    }
}
