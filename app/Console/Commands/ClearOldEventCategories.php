<?php

namespace App\Console\Commands;

use App\Models\Event;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class ClearOldEventCategories extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'events:clear-old-categories 
                            {--dry-run : –ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π}
                            {--force : –í—ã–ø–æ–ª–Ω–∏—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ category_id —É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π';

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å category_id, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–º–µ—é—Ç —Å–≤—è–∑–∏ –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
        $eventsToClean = Event::whereNotNull('category_id')
            ->whereHas('categories', function ($query) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤—è–∑–∏ –≤ pivot —Ç–∞–±–ª–∏—Ü–µ
                $query->whereNotNull('event_categories.category_id');
            })
            ->with(['category', 'categories'])
            ->get();
            
        if ($eventsToClean->isEmpty()) {
            $this->info('‚úÖ –ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –º–∏–≥—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ—á–∏—â–µ–Ω—ã.');
            $this->comment('üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: php artisan events:migrate-categories');
            return Command::SUCCESS;
        }
        
        $this->info("üìã –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏: {$eventsToClean->count()}");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ
        $this->table(
            ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–°—Ç–∞—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'],
            $eventsToClean->map(function ($event) {
                return [
                    $event->id,
                    $event->title,
                    $event->category ? $event->category->name : "ID: {$event->category_id}",
                    $event->categories->pluck('name')->join(', ')
                ];
            })->toArray()
        );
        
        if ($this->option('dry-run')) {
            $this->warn('üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏: –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
            $this->showCleanupPlan($eventsToClean);
            return Command::SUCCESS;
        }
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        $this->newLine();
        $this->warn('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª—è category_id!');
        $this->warn('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (!$this->option('force')) {
            if (!$this->confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π?', false)) {
                $this->info('‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
                return Command::FAILURE;
            }
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        return $this->executeCleanup($eventsToClean);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –æ—á–∏—Å—Ç–∫–∏ –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
     */
    private function showCleanupPlan($events)
    {
        $this->info("\nüìù –ü–ª–∞–Ω –æ—á–∏—Å—Ç–∫–∏:");
        
        foreach ($events as $event) {
            $oldCategory = $event->category ? $event->category->name : "ID: {$event->category_id}";
            $newCategories = $event->categories->pluck('name')->join(', ');
            
            $this->line("   üóëÔ∏è  –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{$event->title}':");
            $this->line("      ‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {$oldCategory}");
            $this->line("      ‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {$newCategories}");
        }
        
        $this->newLine();
        $this->comment('üíæ –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ --dry-run');
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö.
     */
    private function executeCleanup($events)
    {
        $this->info("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...");
        
        $cleaned = 0;
        $errors = 0;
        
        $progressBar = $this->output->createProgressBar($events->count());
        $progressBar->start();
        
        DB::beginTransaction();
        
        try {
            foreach ($events as $event) {
                $progressBar->advance();
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                if ($event->categories->isEmpty()) {
                    $this->newLine();
                    $this->error("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{$event->title}' –Ω–µ –∏–º–µ–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    $errors++;
                    continue;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                $oldCategoryId = $event->category_id;
                $oldCategoryName = $event->category ? $event->category->name : "ID: {$oldCategoryId}";
                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ category_id
                $event->update(['category_id' => null]);
                
                $cleaned++;
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                \Log::info("–û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", [
                    'event_id' => $event->id,
                    'event_title' => $event->title,
                    'old_category_id' => $oldCategoryId,
                    'old_category_name' => $oldCategoryName,
                    'new_categories' => $event->categories->pluck('name')->toArray()
                ]);
            }
            
            DB::commit();
            $progressBar->finish();
            
            $this->newLine(2);
            $this->info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
            $this->info("   ‚Ä¢ –û—á–∏—â–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {$cleaned}");
            
            if ($errors > 0) {
                $this->warn("   ‚Ä¢ –û—à–∏–±–æ–∫: {$errors}");
            }
            
            $this->newLine();
            $this->comment('üíæ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏—Ç–∞.');
            $this->comment('üîÑ –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
            
            return Command::SUCCESS;
            
        } catch (\Exception $e) {
            DB::rollBack();
            $progressBar->finish();
            
            $this->newLine(2);
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏: {$e->getMessage()}");
            $this->error("–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.");
            
            return Command::FAILURE;
        }
    }
}
